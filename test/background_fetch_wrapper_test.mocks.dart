// Mocks generated by Mockito 5.0.16 from annotations
// in gmail_alarm/test/background_fetch_wrapper_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;
import 'dart:convert' as _i7;
import 'dart:typed_data' as _i8;

import 'package:background_fetch/background_fetch.dart' as _i9;
import 'package:firebase_auth/firebase_auth.dart' as _i6;
import 'package:gmail_alarm/model/gmail_api_wrapper.dart' as _i10;
import 'package:gmail_alarm/model/google_auth_client.dart' as _i2;
import 'package:googleapis/gmail/v1.dart' as _i4;
import 'package:http/http.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeGoogleAuthClientIF_0 extends _i1.Fake
    implements _i2.GoogleAuthClientIF {}

class _FakeStreamedResponse_1 extends _i1.Fake implements _i3.StreamedResponse {
}

class _FakeResponse_2 extends _i1.Fake implements _i3.Response {}

class _FakeGmailApi_3 extends _i1.Fake implements _i4.GmailApi {}

class _FakeMessage_4 extends _i1.Fake implements _i4.Message {}

/// A class which mocks [GoogleAuthClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockGoogleAuthClient extends _i1.Mock implements _i2.GoogleAuthClient {
  MockGoogleAuthClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GoogleAuthClientIF get instance =>
      (super.noSuchMethod(Invocation.getter(#instance),
          returnValue: _FakeGoogleAuthClientIF_0()) as _i2.GoogleAuthClientIF);
  @override
  set mockHttpClient(_i3.Client? client) =>
      super.noSuchMethod(Invocation.setter(#mockHttpClient, client),
          returnValueForMissingStub: null);
  @override
  _i5.Future<_i3.StreamedResponse> send(_i3.BaseRequest? request) =>
      (super.noSuchMethod(Invocation.method(#send, [request]),
              returnValue:
                  Future<_i3.StreamedResponse>.value(_FakeStreamedResponse_1()))
          as _i5.Future<_i3.StreamedResponse>);
  @override
  _i5.Future<Map<String, String>> login() => (super.noSuchMethod(
          Invocation.method(#login, []),
          returnValue: Future<Map<String, String>>.value(<String, String>{}))
      as _i5.Future<Map<String, String>>);
  @override
  _i5.Future<void> logout() =>
      (super.noSuchMethod(Invocation.method(#logout, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<_i6.User?> loginUser() =>
      (super.noSuchMethod(Invocation.method(#loginUser, []),
          returnValue: Future<_i6.User?>.value()) as _i5.Future<_i6.User?>);
  @override
  _i5.Future<_i3.Response> head(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#head, [url], {#headers: headers}),
              returnValue: Future<_i3.Response>.value(_FakeResponse_2()))
          as _i5.Future<_i3.Response>);
  @override
  _i5.Future<_i3.Response> get(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#get, [url], {#headers: headers}),
              returnValue: Future<_i3.Response>.value(_FakeResponse_2()))
          as _i5.Future<_i3.Response>);
  @override
  _i5.Future<_i3.Response> post(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i7.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#post, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i3.Response>.value(_FakeResponse_2()))
          as _i5.Future<_i3.Response>);
  @override
  _i5.Future<_i3.Response> put(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i7.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#put, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i3.Response>.value(_FakeResponse_2()))
          as _i5.Future<_i3.Response>);
  @override
  _i5.Future<_i3.Response> patch(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i7.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#patch, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i3.Response>.value(_FakeResponse_2()))
          as _i5.Future<_i3.Response>);
  @override
  _i5.Future<_i3.Response> delete(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i7.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#delete, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i3.Response>.value(_FakeResponse_2()))
          as _i5.Future<_i3.Response>);
  @override
  _i5.Future<String> read(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#read, [url], {#headers: headers}),
          returnValue: Future<String>.value('')) as _i5.Future<String>);
  @override
  _i5.Future<_i8.Uint8List> readBytes(Uri? url,
          {Map<String, String>? headers}) =>
      (super.noSuchMethod(
              Invocation.method(#readBytes, [url], {#headers: headers}),
              returnValue: Future<_i8.Uint8List>.value(_i8.Uint8List(0)))
          as _i5.Future<_i8.Uint8List>);
  @override
  void close() => super.noSuchMethod(Invocation.method(#close, []),
      returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [BackgroundFetch].
///
/// See the documentation for Mockito's code generation for more information.
class MockBackgroundFetch extends _i1.Mock implements _i9.BackgroundFetch {
  MockBackgroundFetch() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String toString() => super.toString();
}

/// A class which mocks [GmailApiWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockGmailApiWrapper extends _i1.Mock implements _i10.GmailApiWrapper {
  MockGmailApiWrapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.GmailApi get gmailApi => (super.noSuchMethod(Invocation.getter(#gmailApi),
      returnValue: _FakeGmailApi_3()) as _i4.GmailApi);
  @override
  set gmailApi(_i4.GmailApi? _gmailApi) =>
      super.noSuchMethod(Invocation.setter(#gmailApi, _gmailApi),
          returnValueForMissingStub: null);
  @override
  _i5.Future<List<_i4.Label>> labels() =>
      (super.noSuchMethod(Invocation.method(#labels, []),
              returnValue: Future<List<_i4.Label>>.value(<_i4.Label>[]))
          as _i5.Future<List<_i4.Label>>);
  @override
  _i5.Future<List<_i4.Message>> messagesByLabels(String? labels) =>
      (super.noSuchMethod(Invocation.method(#messagesByLabels, [labels]),
              returnValue: Future<List<_i4.Message>>.value(<_i4.Message>[]))
          as _i5.Future<List<_i4.Message>>);
  @override
  _i5.Future<_i4.Message> messageById(String? id) =>
      (super.noSuchMethod(Invocation.method(#messageById, [id]),
              returnValue: Future<_i4.Message>.value(_FakeMessage_4()))
          as _i5.Future<_i4.Message>);
  @override
  String toString() => super.toString();
}
